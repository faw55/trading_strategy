import ccxt
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib.pyplot as plt
from io import BytesIO
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib
from talib import SMA, AD, STOCH, MA, RSI, MACD, BBANDS, ATR, WCLPRICE, AVGPRICE, TYPPRICE, SAR
import csv
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import logging
import requests
import json
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "bot token TELEGRAM"
OPENROUTER_API_KEY = "API_KEY"  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://openrouter.ai/keys
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
DEFAULT_MODEL = "cognitivecomputations/dolphin-mistral-24b-venice-edition:free"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
log_file = 'trading_log.csv'

def log_trade(action, price, timestamp):
    with open(log_file, 'a') as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, action, price])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def prepare_data(data):
    features = data[['RSI', 'MACD_Line', 'Signal_Line', 'SMA_50', 'BB_Width', 'ATR']].dropna()
    labels = (data['close'].shift(-1) > data['close']).astype(int)  # 1 - —Ä–æ—Å—Ç, 0 - –ø–∞–¥–µ–Ω–∏–µ
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    min_length = min(len(features), len(labels))
    features = features.iloc[:min_length]
    labels = labels.iloc[:min_length]
    return features, labels

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def train_model(data):
    features, labels = prepare_data(data)
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    print(f"Accuracy: {accuracy_score(y_test, predictions):.2f}")
    joblib.dump(model, 'trading_model.pkl')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    return model

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def retrain_model(data):
    print("–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    return train_model(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
def predict_signals(model, data):
    features = data[['RSI', 'MACD_Line', 'Signal_Line', 'SMA_50', 'BB_Width', 'ATR']].dropna()
    predictions = model.predict(features)
    data['ML_Signal'] = np.nan
    data.loc[features.index, 'ML_Signal'] = predictions
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ ccxt
def fetch_ohlcv(exchange, symbol, timeframe, limit=900):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
    data.set_index('timestamp', inplace=True)
    return data

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã
def is_symbol_available(exchange, symbol):
    markets = exchange.load_markets()
    return symbol in markets

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —á–µ—Ä–µ–∑ ccxt
exchange = ccxt.binance({
    "rateLimit": 900,
    "enableRateLimit": True,
})

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
analysis_in_progress = False

def calculate_indicators(data):
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    data['SMA_50'] = SMA(data['close'], timeperiod=50)
    data['RSI'] = RSI(data['close'], timeperiod=14)
    data['MACD_Line'], data['Signal_Line'], _ = MACD(data['close'], fastperiod=12, slowperiod=26, signalperiod=9)
    data['upper_band'], data['middle_band'], data['lower_band'] = BBANDS(data['close'], timeperiod=20)
    data['ATR'] = ATR(data['high'], data['low'], data['close'], timeperiod=14)
    data['BB_Width'] = data['upper_band'] - data['lower_band']
    data['WCLPRICE'] = WCLPRICE(data['high'], data['low'], data['close'])
    data['AVGPRICE'] = AVGPRICE(data['open'], data['high'], data['low'], data['close'])
    data['TYPPRICE'] = TYPPRICE(data['high'], data['low'], data['close'])
    data['SAR'] = SAR(data['high'], data['low'], acceleration=0.2, maximum=0.2)
    data['slowk'], data['slowd'] = STOCH(data['high'], data['low'], data['close'], fastk_period=21, slowk_period=9, slowk_matype=0, slowd_period=9, slowd_matype=0)
    return data

def generate_price_plot(data, symbol, timeframe):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω"""
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(data.index, data['close'], label='Price', color='black')
    ax.plot(data.index, data['SMA_50'], label='SMA 50', color='blue', linestyle='--')
    ax.plot(data.index, data['upper_band'], label='Upper BB', color='orange', linestyle='--')
    ax.plot(data.index, data['lower_band'], label='Lower BB', color='orange', linestyle='--')
    ax.plot(data.index, data['SAR'], color='red', marker='^', markersize=4, label='SAR')
    ax.set_title(f'{symbol} Price Analysis ({timeframe})')
    ax.legend()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    fig.savefig(buf, format='png')
    plt.close(fig)
    buf.seek(0)
    return buf

def generate_rsi_plot(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ RSI"""
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(data.index, data['RSI'], label='RSI', color='purple')
    ax.axhline(30, color='green', linestyle='--', label='Oversold (30)')
    ax.axhline(70, color='red', linestyle='--', label='Overbought (70)')
    ax.set_title("RSI Indicator")
    ax.legend()
    
    buf = BytesIO()
    fig.savefig(buf, format='png')
    plt.close(fig)
    buf.seek(0)
    return buf

def generate_stochastic_plot(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ Stochastic"""
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(data.index, data['slowk'], label='%K', color='green')
    ax.plot(data.index, data['slowd'], label='%D', color='red')
    ax.axhline(80, color='black', linestyle='--', label='Overbought')
    ax.axhline(20, color='black', linestyle='--', label='Oversold')
    ax.set_title("Stochastic Oscillator")
    ax.legend()
    
    buf = BytesIO()
    fig.savefig(buf, format='png')
    plt.close(fig)
    buf.seek(0)
    return buf

def get_trading_signals(data):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    signals = []
    
    # Stochastic –∞–Ω–∞–ª–∏–∑
    last_k = data['slowk'].iloc[-1]
    last_d = data['slowd'].iloc[-1]
    
    if last_k > 80 and last_d > 80:
        signals.append("üü• Stochastic: –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å!")
    elif last_k < 20 and last_d < 20:
        signals.append("üü© Stochastic: –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å!")
    elif last_k > 70 or last_d > 70:
        signals.append("üüß Stochastic: –ó–æ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏")
    elif last_k < 30 or last_d < 30:
        signals.append("üü© Stochastic: –ó–æ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
    
    # RSI –∞–Ω–∞–ª–∏–∑
    last_rsi = data['RSI'].iloc[-1]
    if last_rsi > 70:
        signals.append("üî¥ RSI: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>70)")
    elif last_rsi < 30:
        signals.append("üü¢ RSI: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<30)")
    
    # Bollinger Bands –∞–Ω–∞–ª–∏–∑
    last_close = data['close'].iloc[-1]
    if last_close > data['upper_band'].iloc[-1]:
        signals.append("üö® –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞!")
    elif last_close < data['lower_band'].iloc[-1]:
        signals.append("üö® –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞!")
    
    # MACD –∞–Ω–∞–ª–∏–∑
    if data['MACD_Line'].iloc[-1] > data['Signal_Line'].iloc[-1]:
        signals.append("üìà MACD: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª (–ª–∏–Ω–∏—è MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π)")
    else:
        signals.append("üìâ MACD: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª (–ª–∏–Ω–∏—è MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π)")
    
    return "\n".join(signals)

async def analyze_market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    global analysis_in_progress
    
    if analysis_in_progress:
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    try:
        analysis_in_progress = True
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        symbol = args[0] if len(args) > 0 else "BTC/USDT"
        timeframe = args[1] if len(args) > 1 else "15m"
        
        await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = fetch_ohlcv(exchange, symbol, timeframe)
        data = calculate_indicators(data)
        
        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = retrain_model(data)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        data = predict_signals(model, data)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        data['Buy_Signal'] = (data['close'] < data['lower_band']) & (data['RSI'] < 30)
        data['Sell_Signal'] = (data['close'] > data['upper_band']) & (data['RSI'] > 70)
        
        if data['Buy_Signal'].iloc[-1]:
            log_trade('buy', data['close'].iloc[-1], data.index[-1])
        if data['Sell_Signal'].iloc[-1]:
            log_trade('sell', data['close'].iloc[-1], data.index[-1])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        price_plot = generate_price_plot(data, symbol, timeframe)
        rsi_plot = generate_rsi_plot(data)
        stoch_plot = generate_stochastic_plot(data)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = get_trading_signals(data)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ {symbol} ({timeframe})</b>\n\n"
            f"{signals}\n\n"
            f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:.2f}\n"
            f"üîÑ RSI: {data['RSI'].iloc[-1]:.2f}\n"
            f"üìâ Stochastic: %K={data['slowk'].iloc[-1]:.2f}, %D={data['slowd'].iloc[-1]:.2f}\n"
            f"üìè –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR): {data['ATR'].iloc[-1]:.2f}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await update.message.reply_photo(photo=price_plot, caption=report, parse_mode='HTML')
        await update.message.reply_photo(photo=rsi_plot, caption="–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI")
        await update.message.reply_photo(photo=stoch_plot, caption="Stochastic Oscillator")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    finally:
        analysis_in_progress = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"üéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. ‚ú®\n\n"
        f"üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ /gpt - –ß–∞—Ç —Å –ò–ò (GPT)\n"
        f"‚Ä¢ /games - –ò–≥—Ä–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
        f"‚Ä¢ /duck - –ò–Ω—Ñ–æ –ø—Ä–æ DUCK √ó MY √ó DUCK\n"
        f"‚Ä¢ /analyze - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞\n\n"
        f"üí° –ù–∞–ø–∏—à–∏ /help –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
        parse_mode='HTML'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üåà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üéØ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "üìö /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "ü§ñ /gpt [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò\n"
        "üìà /analyze [–ø–∞—Ä–∞] [—Ç–∞–π–º—Ñ—Ä–µ–π–º] - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞\n"
        "üéÆ /games - –ò–≥—Ä–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
        "ü¶Ü /duck - –ü—Ä–æ–µ–∫—Ç DUCK √ó MY √ó DUCK\n"
        "üîÅ /echo [—Ç–µ–∫—Å—Ç] - –≠—Ö–æ-–æ—Ç–≤–µ—Ç\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    games_text = (
        "üé≤ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n"
        "1. <a href='https://example.com/game1'>–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è(—Ç–µ—Å—Ç)</a> üöÄ\n"
        "2. <a href='https://example.com/game2'>–ó–∞–≥–∞–¥–∫–∏ –¥—Ä–µ–≤–Ω–æ—Å—Ç–∏(—Ç–µ—Å—Ç)</a> üèõÔ∏è\n"
        "3. <a href='https://example.com/game3'>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç(—Ç–µ—Å—Ç)</a> ‚ûï\n"
        "4. <a href='https://t.me/duckmyduck_bot?start=r2864597aaec4ecce'>DUCK √ó MY √ó DUCK</a> ü¶Ü\n\n"
        "üïπÔ∏è –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏ –Ω–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!\n"
        "‚ú® –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )
    await update.message.reply_text(games_text, parse_mode='HTML', disable_web_page_preview=False)

async def duck_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    duck_text = (
        "ü¶Ü <b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å $DMD –≤ DUCK √ó MY √ó DUCK</b> ü¶Ü\n\n"
        "ü™ô <b>–ö–æ—Ä–º–ª–µ–Ω–∏–µ</b>\n–ö–æ—Ä–º–∏ –£—Ç–æ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–æ—Å–ª–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –¢–æ–∫–µ–Ω—ã $DMD.\n\n"
        "ü•ö <b>–Ø–π—Ü–∞</b>\n–ü–æ–ª—É—á–∞–π –Ø–π—Ü–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è. –°–æ–µ–¥–∏–Ω—è–π –¥–≤–∞ –Ø–π—Ü–∞.\n\n"
        "üê£ <b>–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ</b>\n–°–∫—Ä–µ—â–∏–≤–∞–π —Å–≤–æ–∏—Ö –£—Ç–æ–∫ —Å —É—Ç–∫–∞–º–∏ –¥—Ä—É–∑–µ–π.\n\n"
        "üö¢ <a href='https://t.me/duckmyduck_official_ru/197'>–õ–µ—Ç–Ω–∏–π –∫—Ä—É–∏–∑</a>\n"
        "üß≠ <a href='https://telegra.ph/Flipkoiny-07-17'>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –§–ª–∏–ø–∫–æ–∏–Ω—ã - FAQ </a>\n"
        "üìä <a href='https://t.me/duckmyduck_official_ru/184'>–ê—É–∫—Ü–∏–æ–Ω - FAQ </a>"
    )
    await update.message.reply_text(duck_text, parse_mode='HTML', disable_web_page_preview=True)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.split(' ', 1)[1] if len(update.message.text.split(' ', 1)) > 1 else '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç'
    await update.message.reply_text(f"üîä {text}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    await update.message.reply_text(
        f"‚úâÔ∏è –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: <i>\"{text}\"</i>\n"
        f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
        parse_mode='HTML'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —Å –ò–ò)
async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text(
            "ü§ñ <b>–ò–ò –ß–∞—Ç</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/ai –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ DUCK √ó MY √ó DUCK?</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"
            "- /ai - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å\n"
            "- /gpt - GPT-3.5 Turbo\n"
            "- /mistral - Mistral 7B",
            parse_mode='HTML'
        )
        return

    prompt = " ".join(context.args)
    await handle_ai_request(update, prompt, DEFAULT_MODEL)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GPT-3.5
async def gpt_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gpt [–≤–∞—à –≤–æ–ø—Ä–æ—Å]")
        return
    await handle_ai_request(update, " ".join(context.args), "tngtech/deepseek-r1t2-chimera:free")

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
async def handle_ai_request(update: Update, prompt: str, model: str) -> None:
    await update.message.reply_chat_action(action="typing")
    
    try:
        response = requests.post(
            url=OPENROUTER_API_URL,
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/yourusername/yourbot",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
                "X-Title": "DUCK √ó MY √ó DUCK Helper Bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            },
            json={
                "model": model,
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.7
            }
        )

        if response.status_code == 200:
            answer = response.json()["choices"][0]["message"]["content"]
            await update.message.reply_text(f"ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n{answer}", parse_mode='HTML')
        else:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code})"
            logger.error(f"{error_msg}: {response.text}")
            await update.message.reply_text(error_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ai_request: {str(e)}")
        await update.message.reply_text("üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞
async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        help_text = (
            "üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
            "<code>/analyze [–ø–∞—Ä–∞] [—Ç–∞–π–º—Ñ—Ä–µ–π–º]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/analyze BTC/USDT 15m</code> - –∞–Ω–∞–ª–∏–∑ Bitcoin/USDT –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ\n"
            "<code>/analyze ETH/USDT 1h</code> - –∞–Ω–∞–ª–∏–∑ Ethereum/USDT –Ω–∞ —á–∞—Å–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 1m, 5m, 15m, 30m, 1h, 4h, 1d"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    await analyze_market(update, context)

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("help", help_command),
        CommandHandler("ai", ai_chat),
        CommandHandler("gpt", gpt_chat),
        CommandHandler("games", games_command),
        CommandHandler("duck", duck_command),
        CommandHandler("echo", echo),
        CommandHandler("analyze", analyze_command),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    application.add_error_handler(error_handler)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞!")
    application.run_polling()

if __name__ == "__main__":
    main()